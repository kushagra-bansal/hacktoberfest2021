#include <bits/stdc++.h>
 
using namespace std;
 
#define int long long
 
 
#define pie 3.141592653589793238462643383279
#define M1 1000000007
#define M2 998244353
#define ll long long
#define pb push_back
#define fast() ios_base::sync_with_stdio(false);cin.tie(NULL);
#define F first
#define S second
#define sz(x) (int)x.size()
#define all(x) x.begin(), x.end()
#define rsort(x) sort(x,greater<int> ())
#define endl "\n"
#define gcd __gcd
#define lcm(a,b) (a*b)/gcd(a,b)
#define deci(n) fixed << setprecision(n)
#define test() int test_case;cin >> test_case;while (test_case--)
#define sp " "
#define max3(a,b,c) max(max(a,b),c)
#define min3(a,b,c) min(min(a,b),c)
#define max4(a,b,c,d) max(a,max3(b,c,d))
#define min4(a,b,c,d) min(a,min3(b,c,d))
#define max5(a,b,c,d,e) max(max4(a,b,c,d),e)
#define min5(a,b,c,d,e) min(min4(a,b,c,d),e)
 
 
typedef vector<int> vi;
typedef vector<bool> vb;
typedef vector<string> vs;
typedef vector<vector<int>> vvi;
typedef pair<int, int> pi;
typedef vector<pi> vpi;
typedef map<int,int> mi;
 
/*Power function starts*/
int Power(int a,int n,int mod){
    int res=1;
    while(n){
        if(n%2!=0){
            res=((res%mod)*(a%mod))%mod;
            n--;
        }
        else
        {
            a=((a%mod)*(a%mod))%mod;
            n/=2;
        }
    }
    return res;
}
 
/*Power function ends*/
 
 
/* Prime Checker starts */
bool isPrime(int n) 
{ 
    // Corner cases 
    if (n <= 1) 
        return false; 
    if (n <= 3) 
        return true; 
 
    // This is checked so that we can skip 
    // middle five numbers in below loop 
    if (n % 2 == 0 || n % 3 == 0) 
        return false; 
 
    for (int i = 5; i * i <= n; i = i + 6) 
        if (n % i == 0 || n % (i + 2) == 0) 
            return false; 
 
    return true; 
} 
/* Prime Checker ends */
 
/* Sum of Digits starts */
int getSum(int n) 
{  
int sum = 0; 
while (n != 0) 
{ 
    sum = sum + n % 10; 
    n = n/10; 
} 
return sum; 
} 
/* Sum of digits ends */
 
/* Ceiling function starts */
int myceil(int n,int x)
{
    int y;
    if(n%x==0)
    {
        y=n/x;
        return y;
    }
    else
    {
        y=n/x+1;
        return y;
    }
    
}
/* ceiling function ends */
 
 
int md=M1;
vi fact, inv;
 
void inverse(ll n)
{if(n>=inv.size()){ll size=inv.size();size=size==0? 1:size;
inv.resize(n + 1);inv[0] = 1;
for (ll i = size; i <= n; i++)inv[i] = Power(fact[i], md-2, md);}}
 
void factorial(ll n)
{if(n>=fact.size()){ll size=fact.size();size=size==0? 1:size;
fact.resize(n + 1);fact[0] = 1;for (ll i = size; i <= n; i++)
fact[i] = (fact[i - 1] * i) % md;
}}
 
ll ncr(ll n, ll r) { return (((fact[n] * inv[r]) % md) * inv[n - r]) % md; }
 
#define MAX_SIZE 1300000
int primes[MAX_SIZE];
// Function to generate N prime numbers using  
// Sieve of Eratosthenes 
void Sieve()  
{  
    bool IsPrime[MAX_SIZE];  
    memset(IsPrime, true, sizeof(IsPrime));  
    
    for (int p = 2; p * p < MAX_SIZE; p++)  
    {  
        if (IsPrime[p] == true)  
        {
            for (int i = p * p; i <  MAX_SIZE; i += p)  
                IsPrime[i] = false;  
        }  
    }  
    int index = 0;
    for (int p = 2; p < MAX_SIZE; p++)  
    if (IsPrime[p])   // Store all prime numbers  
            {
                primes[index] = p;
                index++;
            }
            
}   
// 15 = 24*0 + 15
// 24 = 15*1 + 9
// 15 = 9*1 +6
// 9 = 6*1 +3;
// 6 = 3*2 +0;
 
int gcd(int a,int b){
    if(b==0){
        return a;
    }
    int ans = gcd(b,a%b);
    return ans;
}
 
 
//********************THE END OF TEMPLATES*******************//
 
// 11 9 and x=10
 
bool IsSorted(vi& a){
    int n = a.size();
    for(int i=1;i<n;i++){
        if(a[i]<a[i-1]){
            return false;
        }
    }
    return true;
}
 
bool helper(pair<pair<int,int>,int> p1,pair<pair<int,int>,int> p2){
    return p1.first.first<p2.first.first;
}
 
// C function for extended Euclidean Algorithm
int gcdExtended(int a, int b, int* x, int* y)
{
    // Base Case
    if (a == 0) 
    {
        *x = 0, *y = 1;
        return b;
    }
 
    int x1, y1; // To store results of recursive call
    int gcd = gcdExtended(b % a, a, &x1, &y1);
 
    // Update x and y using results of recursive
    // call
    *x = y1 - (b / a) * x1;
    *y = x1;
 
    return gcd;
}
 
int modInverse(int a, int m)
{
    int x, y;
    int g = gcdExtended(a, m, &x, &y);
    if (g != 1)
       ;// printf("Inverse doesn't exist");
    else
    {
        // m is added to handle negative x
        int res = (x % m + m) % m;
        return res;
       // printf("Modular multiplicative inverse is %d", res);
    }
}
 
void printmap(map<int,int>& mp){
    for(auto i:mp){
        cout<<i.first<<" ";
    }
    cout<<endl;
}
 
void printvector(vector<int>& a){
    cout<<"vector becomes "<<endl;
    for(auto i:a){
        cout<<i<<" ";
    }
    cout<<endl;
}
 
int linearSearch(vi& a,int key){
    for(int i=0;i<a.size();i++){
        if(a[i]==key)
        return i;
    }
}
 
int fun(int k){
    int res = 0;
    while(1){
        int ans = Power(2,res,1e9+7);
        if(ans<k)
        res++;
        else{
            break;
        }
    }
    return res;
}
 
void solve(){
    int n;
    cin>>n;
    vector<pair<int,int>> a(n);
    vector<bool> ans(n);
    for(int i=0;i<n;i++){
        cin>>a[i].first;
        a[i].second = i;
    }
    sort(all(a));
    // for(auto i:a){
    //     cout<<i.first<<" "<<i.second<<endl;
    // }
    int prefix[n];
    prefix[0] = a[0].F;
    //cout<<prefix[0]<<" ";
    for(int i=1;i<n;i++){
        prefix[i] = prefix[i-1] + a[i].F;
        //cout<<prefix[i]<<" ";
    }
    ans[a[n-1].S]=true;
    //cout<<"a[n-1].S = "<<a[n-1].S<<endl;
    for(int i=n-2;i>=0;i--){
        //cout<<"boolean "<<ans[a[i+1].S]<<endl;
        //cout<<prefix[a[i].S]<<","<<prefix[a[i+1].S];
        if(ans[a[i+1].S]&&prefix[i]>=a[i+1].F){
            ans[a[i].S]=true;
        }
        else{
            ans[a[i].S]=false;
        }
    }
    int cnt=0;
    for(int i=0;i<n;i++){
        if(ans[i]){
            cnt++;
        }
    }
    cout<<cnt<<endl;
    for(int i=0;i<n;i++){
        if(ans[i]){
            cout<<i+1<<" ";
        }
    }
    cout<<endl;
}
 
int32_t main()
{
    fast();
    test(){
        solve();
    }
    return 0;
}
